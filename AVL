#include <iostream>
using namespace std;

// Cau truc Node
struct Node {
    int key;
    Node* left;
    Node* right;
    int height;
};

// Ham lay chieu cao cua mot node
int height(Node* node) {
    return node == nullptr ? 0 : node->height;
}

// Ham tao mot node moi
Node* createNode(int key) {
    Node* node = new Node();
    node->key = key;
    node->left = nullptr;
    node->right = nullptr;
    node->height = 1;
    return node;
}

// Ham lay he so can bang cua mot node
int getBalance(Node* node) {
    return node == nullptr ? 0 : height(node->left) - height(node->right);
}

// Ham xoay phai
Node* rightRotate(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    // Thuc hien xoay
    x->right = y;
    y->left = T2;

    // Cap nhat chieu cao
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

// Ham xoay trai
Node* leftRotate(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    // Thuc hien xoay
    y->left = x;
    x->right = T2;

    // Cap nhat chieu cao
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

// Ham chen mot node moi vao cay AVL
Node* insert(Node* node, int key) {
    // Chen theo cach cua cay BST
    if (node == nullptr)
        return createNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else // Khong cho phep trung lap
        return node;

    // Cap nhat chieu cao cua nut to tien
    node->height = 1 + max(height(node->left), height(node->right));

    // Lay he so can bang de kiem tra co bi mat can bang khong
    int balance = getBalance(node);

    // Truong hop mat can bang

    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);

    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    // Left Right Case
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

// Ham in cay theo thu tu in-order
void inOrder(Node* root) {
    if (root != nullptr) {
        inOrder(root->left);
        cout << root->key << " ";
        inOrder(root->right);
    }
}

int main() {
    Node* root = nullptr;

    int arr[] = {17, 23, 201, 98, 67, 83, 13, 23, 10, 191, 84, 58}; // Day so dau vao
    int n = sizeof(arr) / sizeof(arr[0]);

    // Chen cac phan tu vao cay AVL
    for (int i = 0; i < n; i++) {
        root = insert(root, arr[i]);
    }

    // In cay AVL theo thu tu in-order
    cout << "Thu tu duyet in-order cua cay AVL: ";
    inOrder(root);

    return 0;
}
